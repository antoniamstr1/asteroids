<!DOCTYPE html>
<html>
<head>
    <link rel="stylesheet" href="css/style.css">
    <title>Asteroids</title>
</head>
<body>
<canvas id="myCanvas"></canvas>
<img id="spaceshuttle" src="../images/millFalc.png" style="display:none">
<img id="asteroidImg" src="../images/asteroid.png" style="display:none">


<div id="gameInterface">
    <div>
        <div class="GameOverTekst"><h1>Game Over!</h1></div>
        <div><h1 id="topRezultat">You've got the TOP result!</h1></div>
        <div class="div-center">
            <button type="button" onclick="resetEverything()">Play again</button>
        </div>
        <div id="vrijemeNaKraju" class="div-center">
            <p>Time :
                <span id="minuteGame">00</span>
                :
                <span id="secondGame">00</span>
                .
                <span id="countGame">00</span></p>

        </div>
    </div>

</div>


<div class="containerDesno">
    <div id="timeri">
        <div class="container-time">
            <p> Top time: </p>
            <div id="bestTime">
                <span class="digits" id="bestMin"></span>
                :
                <span class="digits" id="bestS"></span>
                .
                <span class="digits" id="bestMs"></span>
            </div>
        </div>
        <div class="container-time">
            <p class="container-time"> Time: </p>
            <div id="time">
                <span class="digits" id="minute"></span>
                :
                <span class="digits" id="second"></span>
                .
                <span class="digits" id="count"></span>
            </div>
        </div>
    </div>
</div>
<script>
    //document.getElementById("myCanvas").style.display = "block";

    function resetEverything() {
        location.reload();
    }

    var c = document.getElementById("myCanvas");
    c.width = window.innerWidth-10;
    c.height = window.innerHeight-10;
    var ctx = c.getContext("2d");
    var squareSize = 100;
    var squareX = (c.width - squareSize) / 2;
    var squareY = (c.height - squareSize) / 2;




    //asteroidi
    var asteroidi = [];
    var stars = [];

    var minute = 0;
    var second = 0;
    var count = 0;

    var collision = false;

    //kretnje igrača
    var keys = {};
    window.addEventListener('keydown', function (event) {
        keys[event.key] = true;
        movePlayer();
    });

    window.addEventListener('keyup', function (event) {
        keys[event.key] = false;
        movePlayer();
    });


    drawPlayer();
    //ispis najboljeg vremena:
    bestminuteString = localStorage.bestMin;
    bestsecondString = localStorage.bestS;
    bestcountString = localStorage.bestMs;
    if (localStorage.bestMin === undefined){
        bestminuteString = "00";
        bestsecondString = "00";
        bestcountString = "00";
    }
    if (parseInt(localStorage.bestMin, 10) < 10) {
        bestminuteString = "0" + bestminuteString;
    }
    if (parseInt(localStorage.bestS, 10) < 10) {
        bestsecondString = "0" + bestsecondString;
    }

    if (parseInt(localStorage.bestMs, 10) < 10) {
        bestcountString = "0" + bestcountString;
    }
    document.getElementById('bestTime').querySelector('#bestMin').innerHTML = bestminuteString;
    document.getElementById('bestTime').querySelector('#bestS').innerHTML = bestsecondString;
    document.getElementById('bestTime').querySelector('#bestMs').innerHTML = bestcountString;


    timer = true;
    // https://www.tutorialspoint.com/how-to-create-stopwatch-using-html-css-and-javascript

    stopWatch();

    for (var i = 0; i < 55; i++) {
        createAsteroid();
    }


    for (var j = 0; j < 200; j++) {
        createStarsFirstTime();
    }

    setInterval(function () {
        for (var i = 0; i < 40; i++) {
            createStars();
        }
    }, 10000);

    var counter = 1;
    setInterval(function () {
        counter++;
        var max = 25 + 2 * counter;
        for (var i = 0; i < max; i++) {
            createAsteroid();
        }
    }, 10000);

    gameLoop();


    //kreiranje igrača
    function drawPlayer() {

        //gradijent boja pozadine
        var gradient = ctx.createLinearGradient(0, 0, c.width, c.height);
        gradient.addColorStop(0, 'rgb(6,33,54)');
        gradient.addColorStop(0.7, 'rgb(55,37,102)');
        gradient.addColorStop(1, 'rgb(1,18,31)');

        ctx.fillStyle = gradient;
        ctx.fillRect(0, 0, c.width, c.height);

        //ctx.clearRect(0, 0, c.width, c.height);
        ctx.shadowBlur = 20;
        ctx.shadowColor = "black";
        //ctx.fillStyle = "red";
        //ctx.fillRect(squareX, squareY, squareSize, squareSize);
        var img = document.getElementById("spaceshuttle");
        ctx.drawImage(img,squareX, squareY,100,100);
    }


    function movePlayer() {
        //blokira kretanje nakon sudara
        if (collision === true)
            return
        var step = 7;
        var diagonalStep = Math.sqrt(2) * step;

        if (keys['ArrowUp'] && keys['ArrowRight']) {
            squareX += diagonalStep;
            squareY -= diagonalStep;

        } else if (keys['ArrowUp'] && keys['ArrowLeft']) {
            squareX -= diagonalStep;
            squareY -= diagonalStep;

        } else if (keys['ArrowDown'] && keys['ArrowRight']) {
            squareX += diagonalStep;
            squareY += diagonalStep;

        } else if (keys['ArrowDown'] && keys['ArrowLeft']) {
            squareX -= diagonalStep;
            squareY += diagonalStep;

        } else if (keys['ArrowUp']) {
            squareY -= step;

        } else if (keys['ArrowDown']) {
            squareY += step;

        } else if (keys['ArrowLeft']) {
            squareX -= step;

        } else if (keys['ArrowRight']) {
            squareX += step;

        }
        drawPlayer();
    }


    function getRandomNumber(x) {
        const interval1 = Math.random() * (0 - (-20)) + (-20);
        const interval2 = Math.random() * ((x + 20) - x) + x;

        if (Math.random() < 0.5){
            return interval1;
        }
        else
        {
            return interval2;
        }
    }

    function createAsteroid() {
        var boje = ["rgb(211, 211, 211)",
            "rgb(192,192,192)", "rgb(128,128,128)",
            "rgb(105,105,105)", "rgb(69,69,69)"];
        var randomBojaIndex = Math.floor(Math.random() * 5);
        var size = [10,12,15];
        var randomSizeIndex = Math.floor(Math.random() * 3);
        var asteroid = {
            x: Math.floor(getRandomNumber(c.width)),
            y: Math.floor(getRandomNumber(c.height)),
            directionX: Math.random() * 2 - 1,
            directionY: Math.random() * 2 - 1,
            color: boje[randomBojaIndex],
            size: size[randomSizeIndex]
        };
        asteroidi.push(asteroid);
    }
    console.log('c.width:', c.width);

    function createStarsFirstTime(){
        var star = {
            x: Math.floor(Math.random() * (c.width + 1)),
            y: Math.floor(Math.random() * (c.height + 1)),
            directionX: (Math.random() * 2 - 1)*0.2,
            directionY: 0,
            color: "white"
        };
        stars.push(star);
    }

    function createStars(){
        var randomNumber = Math.random();
        var locX = 0;
        if (randomNumber < 0.5) {
            locX = -20;
        } else {
            locX =  c.width+20;
        }
        var star = {
            x:locX,
            y: Math.floor(Math.random() * (c.height + 1)),
            directionX: (Math.random() * 2 - 1)*0.2,
            directionY: 0,
            color: "white"
        };
        stars.push(star);
    }

    function moveAsteroids() {
        for (var i = 0; i < asteroidi.length; i++) {
            asteroidi[i].x += asteroidi[i].directionX;
            asteroidi[i].y += asteroidi[i].directionY;
        }
    }

    function moveStars() {
        for (var i = 0; i < stars.length; i++) {
            stars[i].x += stars[i].directionX;
        }
    }

    function drawAsteroids() {
        for (var i = 0; i < asteroidi.length; i++) {
            //ctx.fillStyle = asteroidi[i].color;
            //ctx.fillRect(asteroidi[i].x, asteroidi[i].y, 20, 20);
            ctx.fillStyle = asteroidi[i].color;
            ctx.beginPath();
            ctx.arc(asteroidi[i].x + 10, asteroidi[i].y + 10, asteroidi[i].size, 0, 2 * Math.PI);
            ctx.fill();
            ctx.closePath();
        }
    }
    function drawStars() {
        for (var i = 0; i < stars.length; i++) {
            ctx.fillStyle = stars[i].color;
            ctx.beginPath();
            ctx.shadowColor = "white";
            ctx.shadowBlur = 15;
            ctx.arc(stars[i].x, stars[i].y, 1.5, 0, 2 * Math.PI);
            ctx.fill();
            ctx.closePath();

        }
    }


    function stopWatch() {
        if (timer) {
            count++;
            if (count === 60) {
                second++;
                count = 0;
            }
            if (second === 60) {
                minute++;
                second = 0;
            }
            if (minute === 60) {
                minute = 0;
                second = 0;
            }

            let minuteString = minute;
            let secondString = second;
            let countString = count;

            //da mi ima dvije znamenke kod ispisa vremena
            if (minute < 10) {
                minuteString = "0" + minuteString;
            }
            if (second < 10) {
                secondString = "0" + secondString;
            }

            if (count < 10) {
                countString = "0" + countString;
            }
            document.getElementById('time').querySelector('#minute').innerHTML = minuteString;
            document.getElementById('time').querySelector('#second').innerHTML = secondString;
            document.getElementById('time').querySelector('#count').innerHTML = countString;

            //za ispis vremena na kraju
            document.getElementById('vrijemeNaKraju').querySelector('#minuteGame').innerHTML = minuteString;
            document.getElementById('vrijemeNaKraju').querySelector('#secondGame').innerHTML = secondString;
            document.getElementById('vrijemeNaKraju').querySelector('#countGame').innerHTML = countString;

            setTimeout(stopWatch, 10);
        }
    }

    // 1 je iz local storage
    // 2 je vrijeme igrača
    function isLocalBetterTime(min1, s1, ms1, min2, s2, ms2) {
        //ako je undefined onda je sigurno top time
        if (localStorage.bestMin === undefined)
            return false;
        //prvo usporedim minute
        else {
            if (min1 < min2) return true;
            else if (min1 > min2) {
                return false;
            } else if (min1 === min2) {
                //uspoređujem sekunde
                if (s1 < s2) return true;
                else if (s1 > s2) {
                    return false;

                } else if (s1 === s2) {
                    //uspoređujem milisekunde
                    if (ms1 < ms2) return true;
                    else if (ms1 > ms2) return true;
                    else return true;
                }
            }
        }
    }

    function gameLoop() {
        //ako je došlo do sudara
        if (collision === false) {

            drawPlayer();
            moveAsteroids();
            drawAsteroids();
            moveStars();
            drawStars();
            for (var i = 0; i < asteroidi.length; i++) {
                if (isCollision(squareX, squareY, squareSize, squareSize, asteroidi[i].x, asteroidi[i].y, 20, 20)) {
                    collision = true;
                    timer = false;

                    //web sučelje
                    var gameOverScreen = document.getElementById("gameInterface");
                    gameOverScreen.style.display = "flex";
                    //spremanje u localstorage ako je veće od toga
                    if (localStorage.bestMin === undefined) {
                        localStorage.bestMin = minute;
                        localStorage.bestS = second;
                        localStorage.bestMs = count;
                    }
                    if (localStorage.bestMin !== undefined) {
                        bestMin = localStorage.getItem('bestMin');
                        bestS = localStorage.getItem('bestS');
                        bestMs = localStorage.getItem('bestMs');

                        //pogledam jel veće vrijeme, ako je zamijenim
                        if (isLocalBetterTime(parseInt(bestMin, 10), parseInt(bestS, 10), parseInt(bestMs, 10), minute, second, count) === true) {
                            localStorage.bestMin = minute;
                            localStorage.bestS = second;
                            localStorage.bestMs = count;

                            //možda neki "imate TOP rezultat"
                            var topRezultat = document.getElementById("topRezultat");
                            topRezultat.style.display = "flex";
                        }
                    }
                    return;

                }
            }
            requestAnimationFrame(gameLoop);
        }


    }
    // pozicija playera
    // širina, visina playera
    // ostalo za asteroide
    function isCollision(x1, y1, width1, height1, x2, y2, width2, height2) {
        if (x1 +15 < x2 + width2 && x1 - 10 + (width1-20) > x2 &&  y1 < y2 + height2 && y1 + (height1-20) > y2)
            return true;
        else{
            return false;
        }
    }


</script>
</body>
</html>
